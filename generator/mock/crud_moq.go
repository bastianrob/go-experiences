// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"sync"
)

var (
	lockCRUDMockCreate sync.RWMutex
	lockCRUDMockFind   sync.RWMutex
	lockCRUDMockGet    sync.RWMutex
	lockCRUDMockUpdate sync.RWMutex
)

// CRUDMock is a mock implementation of CRUD.
//
//     func TestSomethingThatUsesCRUD(t *testing.T) {
//
//         // make and configure a mocked CRUD
//         mockedCRUD := &CRUDMock{
//             CreateFunc: func(dao interface{}) error {
// 	               panic("mock out the Create method")
//             },
//             FindFunc: func(ids ...string) (interface{}, error) {
// 	               panic("mock out the Find method")
//             },
//             GetFunc: func(id string) (interface{}, error) {
// 	               panic("mock out the Get method")
//             },
//             UpdateFunc: func(dao interface{}) error {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedCRUD in code that requires CRUD
//         // and then make assertions.
//
//     }
type CRUDMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(dao interface{}) error

	// FindFunc mocks the Find method.
	FindFunc func(ids ...string) (interface{}, error)

	// GetFunc mocks the Get method.
	GetFunc func(id string) (interface{}, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(dao interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Dao is the dao argument value.
			Dao interface{}
		}
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ids is the ids argument value.
			Ids []string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// ID is the id argument value.
			ID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Dao is the dao argument value.
			Dao interface{}
		}
	}
}

// Create calls CreateFunc.
func (mock *CRUDMock) Create(dao interface{}) error {
	if mock.CreateFunc == nil {
		panic("CRUDMock.CreateFunc: method is nil but CRUD.Create was just called")
	}
	callInfo := struct {
		Dao interface{}
	}{
		Dao: dao,
	}
	lockCRUDMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockCRUDMockCreate.Unlock()
	return mock.CreateFunc(dao)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedCRUD.CreateCalls())
func (mock *CRUDMock) CreateCalls() []struct {
	Dao interface{}
} {
	var calls []struct {
		Dao interface{}
	}
	lockCRUDMockCreate.RLock()
	calls = mock.calls.Create
	lockCRUDMockCreate.RUnlock()
	return calls
}

// Find calls FindFunc.
func (mock *CRUDMock) Find(ids ...string) (interface{}, error) {
	if mock.FindFunc == nil {
		panic("CRUDMock.FindFunc: method is nil but CRUD.Find was just called")
	}
	callInfo := struct {
		Ids []string
	}{
		Ids: ids,
	}
	lockCRUDMockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	lockCRUDMockFind.Unlock()
	return mock.FindFunc(ids...)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedCRUD.FindCalls())
func (mock *CRUDMock) FindCalls() []struct {
	Ids []string
} {
	var calls []struct {
		Ids []string
	}
	lockCRUDMockFind.RLock()
	calls = mock.calls.Find
	lockCRUDMockFind.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CRUDMock) Get(id string) (interface{}, error) {
	if mock.GetFunc == nil {
		panic("CRUDMock.GetFunc: method is nil but CRUD.Get was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockCRUDMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCRUDMockGet.Unlock()
	return mock.GetFunc(id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCRUD.GetCalls())
func (mock *CRUDMock) GetCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockCRUDMockGet.RLock()
	calls = mock.calls.Get
	lockCRUDMockGet.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CRUDMock) Update(dao interface{}) error {
	if mock.UpdateFunc == nil {
		panic("CRUDMock.UpdateFunc: method is nil but CRUD.Update was just called")
	}
	callInfo := struct {
		Dao interface{}
	}{
		Dao: dao,
	}
	lockCRUDMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockCRUDMockUpdate.Unlock()
	return mock.UpdateFunc(dao)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedCRUD.UpdateCalls())
func (mock *CRUDMock) UpdateCalls() []struct {
	Dao interface{}
} {
	var calls []struct {
		Dao interface{}
	}
	lockCRUDMockUpdate.RLock()
	calls = mock.calls.Update
	lockCRUDMockUpdate.RUnlock()
	return calls
}
